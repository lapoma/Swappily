openapi: 3.0.0
info:
  version: 1.0.0
  title: "Swappily OpenAPI 3.0"
  description: API for managing exchange of goods between users.
  license:
    name: MIT
servers:
  - url: http://localhost:8080/api/v1
    description: Localhost
paths:
  #User Story 2: Login. 
  #Come utente o operatore di Swappily, voglio effettuare il login al mio account in modo da accedere al mio profilo personale.
  /authentications:
    post:
      description: Authenticate a user
      summary: Authenticate a user and return a token.
      responses:
        '200':
          description: 'Token created'
          content:
            application/json:
              schema:
                type: object
                properties: 
                  success:
                    type: boolean
                    description: 'True if the authentication is a success'
                  token:
                    type: string
                    description: 'JWT token'
        '401':
          description: 'Unauthorized. Invalid credential'
      requestBody:
        description: The username and password must be passed in the 'Body
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username: 
                  type: string
                  description: 'Username of the user'
                password:
                  type: string
                  description: 'Password of the user'
  # USER STORY 1
  #Come nuovo utente, voglio potermi registrare creando un account personale con i miei dati, in modo da poter accedere all’app e a tutte le sue funzioni.
  /users:
    post:
      description: >-
        Creates a new user in the system.
      summary: Register a new user.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '201':
          description: 'User created. Link in the Location header'
          headers:
            'Location':
              schema:
                type: string
              description: Link to the newly created user.
        '400':
          description: 'Bad request. The input is not correct'
    #Come utente Swappily, voglio poter cercare articoli o persone in modo da trovare annunci di mio interesse e mettermi in contatto con altri utenti.
    get:
      description: >- 
        Get all the users. It is possible to show users by their username or userId
      summary: View all or one user.
      parameters:
        - in: query
          name: userId
          schema:
            type: string
          required: false
        - in: query
          name: username
          schema:
            type: string
          required: false
      responses:
        '200':
          description: 'Collection of users'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '404':
          description: 'User not found'
        '500':
          description: 'Server error'
  
  /users/{userID}:
  #User Story 5
  #Come utente voglio poter eliminare il mio account in modo permanente, così da rimuovere tutti i miei dati dal sistema se non desidero più utilizzare la piattaforma.
    delete:
      description: 'Delete an user'
      summary: Delete an user.
      security:
        - TokenQueryAuth: []
        - accessTokenHeader: []
      parameters:
      #  - in : header
      #    name: authenticate
      #    schema:
      #      type: string
        - in : path
          name: userId
          schema:
            type: integer
          required: true
      responses:
        '204':
          description: 'User deleted'
        '404': 
          description: 'User not found'
        '500': 
          description: 'Server error'
    #User Story 4: Pagina personale.
    #Come utente autenticato, voglio poter visualizzare e modificare le informazioni del mio profilo personale, così da poter aggiornare i miei dati e gestire facilmente i contenuti che creo o seguo all’interno della piattaforma.
    put:
      description: >-
        Updates an existing user.
      summary: Update an existing user
      security:
        - TokenQueryAuth: []
        - accessTokenHeader: []
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
      #  - in: header
      #    name: authenticate
      #    schema:
      #      type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: 'User updated'
        '404':
          description: 'User not found'     
  #User Story 10: Post per lo scambio. Creazione di un post e conseguente compilazione dei campi descrittivi.
  #Come utente, voglio poter pubblicare uno o più articoli in modo da permettere ad altri utenti di effettuare scambi e proposte con altri articoli, in base ad esigenze specifiche designate nei campi dei filtri. 
  /listings:
    post:
      description: >-
        Creates a new listing.
      summary: Create a new listing
      security:
        - TokenQueryAuth: []
        - accessTokenHeader: []
      #parameters:
        # - in: header
        #   name: authenticate
        #   schema:
        #     type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Listing'
      responses:
        '201':
          description: 'Listing created. Link in the Location header'
          headers:
            'Location':
              schema:
                type: string
              description: Link to the newly created listing.
    get:
      description: >-
        Gets the list of listings. It is possible to show the listing by their Id or title
        or filtered by categories or status.
      summary: View all listings
      parameters:
        - in: query
          name: listingId
          schema:
            type: string
        - in: query
          name: title
          schema:
            type: string
        - in: query
          name: status
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: 'Collection of listings'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Listing'
        '404': 
          description: 'Not found'
        '500':
          description: 'Server error'
  /listings/{listingId}:
    delete:
      description: >-
        Deletes a listing by ID.
      summary: Delete a listing
      security:
        - TokenQueryAuth: []
        - accessTokenHeader: []
      parameters:
      - in: path
        name: listingId
        schema:
          type: string
        required: true
     # - in : header
      #  name: authenticate
       # schema:
        #  type: string
      responses:
        '204':
          description: 'Listing deleted'
        '403':
          description: 'The user does not have the authorization'
        '404':
          description: 'Listing not found'     
    put:
      description: >-
        Updates an existing listing.
      summary: Update an existing listing
      security:
        - TokenQueryAuth: []
        - accessTokenHeader: []
      parameters:
        - in: path
          name: listingId
          schema:
            type: string
          required: true
        # - in: header
        #   name: authenticate
        #   schema:
        #     type: string
      requestBody:  
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Listing'
      responses:
        '200':
          description: 'Listing modified'
        '404':
          description: 'Listing not found'
  /exchange/{listingId}:
    #User Story 10
    #Come utente autenticato, voglio poter inviare una proposta di scambio a un altro utente, scegliendo uno dei miei prodotti o creandone uno nuovo, così da avviare una trattativa diretta.
    post:
      description: >-
        Creates a new exchange.
      summary: Exchange an object
      security:
        - TokenQueryAuth: []
        - accessTokenHeader: []
      parameters:
        # - in: header
        #   name: authenticate
        #   schema:
        #     type: string
        - in: path
          name: listingId
          schema:
            type: string
          required: true
      responses:
        '201':
          description: 'Exchange created. Link in the Location header'
          headers:
            'Location':
              schema:
                type: string
              description: Link to the newly created exchange.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Exchange'
  /exchange/{exchangeId}:
    put:
      description: 'Modify an exchange'
      summary: 'Modify an exchange'
      security:
        - TokenQueryAuth: []
        - accessTokenHeader: [] 
      parameters: 
        # - in: header
        #   name: authenticate
        #   schema:
        #     type: string
        - in: path
          name: exchangeId
          schema:
            type: string
          required: true
      responses:
        '200':
          description: 'Exchange modified'
        '404':
          description: 'Exchange not found'
    delete:
      description: >-
        'Deleting an existing exchange'
      summary: 'Deleting an exchange'
      security:
        - TokenQueryAuth: []
        - accessTokenHeader: []
      # parameters:
      #   - in: header
      #     name: authenticate
      #     schema:
      #       type: string
      responses:
        '204':
          description: 'Exchange deleted'
        '404': 
          description: 'Exchange not found'
  /review:
  # User Story 15: Recensioni
  #Come utente autenticato, voglio poter lasciare una recensione su un altro utente dopo uno scambio completato, così da condividere la mia esperienza e aiutare altri a valutare la sua affidabilità.
    post: 
      description: >-
        'Create a new review'
      summary: 'Write a review'
      security:
        - TokenQueryAuth: []
        - accessTokenHeader: [] 
      # parameters:
      #   - in: header
      #     name: authenticate
      #     schema:
      #       type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        '201':  
          description: >-
           'Review created. The header contains a link to the newliy created review'
          headers:
            'Location':
              schema:
                type: string
              description: Link to the newly created review.
  /review/{reviewId}:
    delete:
      description: >-
        'The user deletes one of his revews'
      summary: 'Deleting a revew'
      security:
        - TokenQueryAuth: []
        - accessTokenHeader: []
      parameters:
        # - in: header
        #   name: authenticate
        #   schema:
        #     type: string
        - in: path
          name: reviewId
          schema:
            type: string
          required: true
      responses:
        '204': 
          description: 'Review deleted'
        '403': 
          description: 'This user does not have the authorizatuon'
        '404':  
          description: 'Review not found' 
  /review/{revieweeId}:
    get:
      description: 'Get all the review of one user'
      summary: 'Reviews of an user'
      parameters:
        - in: header
          name: authenticate
          schema:
            type: string
        - in: path
          name: revieweeId
          schema:
            type: string
      responses:
        '200':
          description: 'Reviews find'
          content:
            application/json:
              schema:
                type: array
                
        '404':  
          description: 'Not found'
        '500':  
          description: 'Server error'

  /report/{Id}:
    post:
      description: 'Creating a new report'
      summary: 'Create a report'
      parameters:
        - in: header
          name: authenticate
          schema:
            type: string
        - in: path
          name: Id.
          schema: 
            type: string
      responses:
        '201':
          description: 'Report created'
        '404':
          description: 'Not found'
        '500':
          description: 'Server error'

components:

  securitySchemes:
    accessTokenHeader:
      description: >-
        The API authentication.
        The API key must be a valid JWT token.
      type: apiKey
      in: header
      name: x-access-token
    TokenQueryAuth:
      description: >-
        The APi authentication.
        The API must be a valid JWT token'
      type: apiKey
      in: query
      name: token

  schemas:
    User:
      type: object
      required:
        - name
        - userId
        - surname
        - username
        - email
        - password
      properties:
        name:
          type: string
          description: 'Name of the user'
        userId:
          type: integer
        surname:  
          type: string
          description: 'Name of the user'
        username:
          type: string
          minLength: 3
          maxLength: 20
          description: 'Username of the user'
        email:
          type: string
          description: 'Email address of the user'
        password:
          type: string
          minLength: 8
          description: 'Password of the user'
    Listing:
      type: object
      required:
        - title
        - userId
        - username
        - description
        - status
        - available
      properties:
        title:
          type: string
          description: 'Title of the listing'
        userId:
          type: string
          description: 'Identification code of the user'
        username:
          type: string
          description: 'Username of the creator of the listing'
        description:
          type: string
          description: 'Description of the listing'
        status:
          type: string
          enum: [As new, Good, Ok, Not Good]
          description: 'Physical condition of the object'
        available:
          type: boolean
          description: 'Availability of the object'
    Exchange:
      type: object
      required:
      - sender
      - receiver
      - offeredListing
      - requestedListing
      - status
      - date
      properties:
        sender:
          type: string
          format: objectId
          description: 'Link to the user who initiated the exchange'
        receiver:
          type: string
          format: objectId
          description: 'Link to the user who initiated the exchange'
        offeredListing:
          type: string
          format: objectId
          description: 'Link to the listing'
        requestedListing:
          type: string
          format: objectId
          description: 'Reference to the listing requested in the exchange'
        status:
          type: string
          enum: ['pending', 'accepted', 'rejected']
          description: 'Status of the exchange'
        date:
          type: string
          format: date-time
          description: 'Date when the exchange was created'
    Review:
      type: object
      required:
      - reviewId
      - revieweeId
      - reviewerId
      - text
      properties:
        reviewId:
          type: integer
          format: objectId
          description: 'Id of the review'
        reviewerId:
          type: string
          format: objectId
          description: 'Id of the user writing the review'
        revieweeId:
          type: string
          format: objectId
          description: 'Id of the user being reviewed'
        text:
          type: string
          format: objectId
          description: 'Body of the review'
    Report:
      type: object
      required:
        - reportId
        - reporterId
        - reporteeId
        - listingId
        - text
      properties:
        reportId:
          type: integer
          description: 'Id of the report'
        reporterId:
          type: integer
          description: 'Id of the user author of the report'
        reporteeId:
          type: string
          description: 'Id of the user reported'
        listingId:
          type: string
          description: 'Id of the listing reported'
        text:
          type: string
          description: 'Textual description of the report'