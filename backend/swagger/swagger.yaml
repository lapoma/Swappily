openapi: 3.0.0
info:
  title: Swappil OpenAPI 3.0
  description: API for managing exchange of goods between users.
  license:
    name: MIT
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/unitn-c1a/Swappily/1.0.0
  description: SwaggerHub API Auto Mocking
- url: http://localhost:8080/api/v1
  description: Localhost
paths:
  /authentications:
    post:
      description: Authenticate a user
      requestBody:
        description: The username and password must be passed in the Body
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/authentications_body"
        required: true
      responses:
        "200":
          description: Token created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200"
        "401":
          description: Unauthorized. Invalid credential.
  /users:
    get:
      description: Get all the users by username.
      parameters:
      - name: username
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Collection of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "404":
          description: User not found
    post:
      summary: Register a new user.
      description: Creates a new user in the system.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: User created. Link in the Location header
          headers:
            Location:
              description: Link to the newly created user.
              style: simple
              explode: false
              schema:
                type: string
        "400":
          description: Bad request. The input is not correct
  /users/{userId}:
    get:
      description: Gets a user by ID.
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
    put:
      description: Updates an existing user.
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: User updated
        "404":
          description: User not found
      security:
      - TokenQueryAuth: []
      - accessTokenHeader: []
    delete:
      description: Delete a user
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: User deleted
        "404":
          description: User not found
      security:
      - TokenQueryAuth: []
      - accessTokenHeader: []
  /users/{userId}/favorites/{listingId}:
    post:
      description: Add a listing to user's favorites
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: listingId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Favorites list updated
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: objectId
        "400":
          description: Listing already in favorites
        "404":
          description: User or listing not found
    delete:
      description: Remove a listing from user's favorites
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: listingId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Favorites list updated
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: objectId
        "400":
          description: Listing not in favorites
        "404":
          description: User or listing not found
  /users/{userId}/favorites:
    get:
      description: Get user's favorite listings
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: List of favorite listings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/inline_response_200_1"
        "404":
          description: User not found
  /users/{userId}/block/{blockedUserId}:
    post:
      description: Block a user
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: blockedUserId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: User blocked successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_2"
        "400":
          description: Bad Request. Cannot block yourself or user already blocked
        "404":
          description: User not found
    delete:
      description: Unblock a user
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: blockedUserId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: User unblocked successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_2"
        "400":
          description: Bad Request. User not blocked.
        "404":
          description: User not found
  /users/{userId}/blocked:
    get:
      description: Get list of blocked users
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: List of blocked users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/inline_response_200_3"
        "404":
          description: User not found
  /users/{userId}/follow/{targetUserId}:
    post:
      description: Follow another user
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: targetUserId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successfully followed user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_4"
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: User not found
      security:
      - TokenQueryAuth: []
      - accessTokenHeader: []
    delete:
      description: Unfollow another user
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: targetUserId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successfully unfollowed user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_5"
        "400":
          description: Bad request
        "403":
          description: Forbidden
        "404":
          description: User not found
      security:
      - TokenQueryAuth: []
      - accessTokenHeader: []
  /users/{userId}/following:
    get:
      description: Get list of followed users
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: List of followed users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_6"
        "404":
          description: User not found
  /users/{userId}/followers:
    get:
      description: Get list of followers
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: List of followers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_7"
        "404":
          description: User not found
  /users/{userId}/isFollowing/{targetUserId}:
    get:
      description: Check if a user is following another user
      parameters:
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: targetUserId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Following status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200_8"
        "404":
          description: User not found
  /listings:
    get:
      description: Gets the list of listings. It is possible to show the listing by
        their title or filtered by status.
      parameters:
      - name: title
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: status
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          enum:
          - As new
          - Good
          - Ok
          - Not Good
      responses:
        "200":
          description: Collection of listings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Listing"
        "404":
          description: Not found
    post:
      description: Creates a new listing.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Listing"
      responses:
        "201":
          description: Listing created. Link in the Location header
          headers:
            Location:
              description: Link to the newly created listing.
              style: simple
              explode: false
              schema:
                type: string
        "400":
          description: Bad request.
        "403":
          description: Not authorized.
      security:
      - TokenQueryAuth: []
      - accessTokenHeader: []
  /listings/{listingId}:
    get:
      description: Gets a listing by ID.
      parameters:
      - name: listingId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Listing found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Listing"
        "404":
          description: Listing not found
    put:
      description: Updates an existing listing.
      parameters:
      - name: listingId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Listing"
      responses:
        "200":
          description: Listing modified
        "404":
          description: Listing not found
      security:
      - TokenQueryAuth: []
      - accessTokenHeader: []
    delete:
      description: Deletes a listing by ID.
      parameters:
      - name: listingId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Listing deleted
        "403":
          description: The user does not have the authorization
        "404":
          description: Listing not found
      security:
      - TokenQueryAuth: []
      - accessTokenHeader: []
  /users/{userId}/listings:
    get:
      summary: Get all listings of a user
      description: Returns all listings created by the specified user.
      parameters:
      - name: userId
        in: path
        description: ID of the user
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Array of listings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Listing"
        "400":
          description: Invalid userId
        "404":
          description: No listings found for this user
  /exchange:
    get:
      description: Gets the list of exchanges.
      parameters:
      - name: status
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
          enum:
          - pending
          - accepted
          - rejected
      responses:
        "200":
          description: Collection of exchanges
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Exchange"
        "404":
          description: Exchanges not found
  /exchange/listing/{listingId}:
    post:
      description: Creates a new exchange.
      parameters:
      - name: listingId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Exchange"
      responses:
        "201":
          description: Exchange created. Link in the Location header
          headers:
            Location:
              description: Link to the newly created exchange.
              style: simple
              explode: false
              schema:
                type: string
      security:
      - TokenQueryAuth: []
      - accessTokenHeader: []
  /exchange/{exchangeId}:
    get:
      description: Gets an exchange by ID.
      parameters:
      - name: exchangeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Exchange found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Exchange"
        "404":
          description: Exchange not found
    put:
      description: Modify an exchange
      parameters:
      - name: exchangeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Exchange"
      responses:
        "200":
          description: Exchange modified
        "404":
          description: Exchange not found
      security:
      - TokenQueryAuth: []
      - accessTokenHeader: []
    delete:
      description: Deleting an existing exchange
      parameters:
      - name: exchangeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Exchange deleted
        "404":
          description: Exchange not found
      security:
      - TokenQueryAuth: []
      - accessTokenHeader: []
  /review:
    post:
      description: Create a new review
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Review"
      responses:
        "201":
          description: Review created. The header contains a link to the newly created
            review
          headers:
            Location:
              description: Link to the newly created review.
              style: simple
              explode: false
              schema:
                type: string
        "400":
          description: Bad request. The input is not correct
  /review/{reviewId}:
    delete:
      description: The user deletes one of his reviews
      parameters:
      - name: reviewId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: Review deleted
        "403":
          description: This user does not have the authorization
        "404":
          description: Review not found
      security:
      - TokenQueryAuth: []
      - accessTokenHeader: []
  /review/reviewee/{revieweeId}:
    get:
      description: Get all the reviews of one user
      parameters:
      - name: authenticate
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: revieweeId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Reviews found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Review"
        "404":
          description: Not found
  /report:
    post:
      description: Creating a new report
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Report"
      responses:
        "201":
          description: Report created successfully
          headers:
            Location:
              description: Link to the newly created report
              style: simple
              explode: false
              schema:
                type: string
        "400":
          description: Bad request. Missing required fields
        "404":
          description: User or listing not found
      security:
      - TokenQueryAuth: []
      - accessTokenHeader: []
components:
  schemas:
    User:
      required:
      - email
      - name
      - password
      - surname
      - username
      - usertype
      type: object
      properties:
        userId:
          type: string
          description: Unique identifier for the user
        name:
          type: string
          description: Name of the user
        surname:
          type: string
          description: Surname of the user
        username:
          maxLength: 20
          minLength: 3
          type: string
          description: Username of the user
        email:
          type: string
          description: Email address of the user
          format: email
        password:
          minLength: 8
          type: string
          description: Password of the user
        usertype:
          type: string
          description: Indicates whether the user is a normal user or an operator
          enum:
          - user
          - operator
        phone:
          type: string
          description: Phone number of the user
        favorite:
          type: array
          description: List of favorite listings of the user
          items:
            type: string
          default: []
        followed:
          type: array
          description: List of followed users
          items:
            type: string
          default: []
        n_followed:
          type: integer
          description: Number of users followed by the user
          default: 0
        followers:
          type: array
          description: List of followers of the user
          items:
            type: string
          default: []
        n_followers:
          type: integer
          description: Number of followers of the user
          default: 0
        blocklist:
          type: array
          description: List of users blocked by the user
          items:
            type: string
          default: []
        n_exchanges:
          type: integer
          description: Number of exchanges made by the user
          default: 0
        description:
          maxLength: 2000
          minLength: 3
          type: string
          description: Profile description of the user
          default: ""
        profile_url:
          type: string
          description: Profile picture of the user
    Listing:
      required:
      - available
      - description
      - listing_url
      - status
      - title
      - userId
      type: object
      properties:
        listingId:
          type: string
          description: Unique identifier for the listing
        title:
          maxLength: 50
          minLength: 3
          type: string
          description: Title of the listing
        userId:
          type: string
          description: ID of the user who created the listing
        username:
          type: string
          description: Username of the creator of the listing
        description:
          type: string
          description: Description of the listing
        status:
          type: string
          description: Physical condition of the object
          enum:
          - As new
          - Good
          - Ok
          - Not Good
        available:
          type: boolean
          description: Availability of the object
          default: true
        listing_url:
          maxItems: 10
          type: array
          description: Images of the listing
          items:
            type: string
    Exchange:
      required:
      - offeredListing
      - receiver
      - requestedListing
      - sender
      - status
      type: object
      properties:
        exchangeId:
          type: string
          description: Unique identifier for the exchange
        sender:
          type: string
          description: ID of the user who initiated the exchange
        receiver:
          type: string
          description: ID of the user who received the exchange request
        offeredListing:
          type: string
          description: ID of the listing offered in exchange
        requestedListing:
          type: string
          description: ID of the listing requested in exchange
        status:
          type: string
          description: Status of the exchange
          default: pending
          enum:
          - pending
          - accepted
          - rejected
        date:
          type: string
          description: Date when the exchange was created
          format: date-time
    Review:
      required:
      - revieweeId
      - reviewerId
      - text
      type: object
      properties:
        reviewId:
          type: string
          description: Unique identifier for the review
        reviewerId:
          type: string
          description: ID of the user writing the review
        revieweeId:
          type: string
          description: ID of the user being reviewed
        text:
          type: string
          description: Body of the review
    Report:
      required:
      - reporterId
      - text
      type: object
      properties:
        reportId:
          type: string
          description: Unique identifier for the report (auto-generated)
        reporterId:
          type: string
          description: ID of the user creating the report
        reporteeId:
          type: string
          description: ID of the user being reported (optional)
        listingId:
          type: string
          description: ID of the listing being reported (optional)
        text:
          maxLength: 2000
          type: string
          description: Textual description of the report
    authentications_body:
      required:
      - password
      - username
      type: object
      properties:
        username:
          type: string
          description: Username of the user
        password:
          type: string
          description: Password of the user
    inline_response_200:
      type: object
      properties:
        success:
          type: boolean
          description: True if the authentication is a success
        token:
          type: string
          description: JWT token
    inline_response_200_1:
      type: object
      properties:
        _id:
          type: string
          description: Listing ID
        title:
          type: string
          description: Listing title
        images:
          type: array
          description: Listing images
          items:
            type: string
    inline_response_200_2:
      type: object
      properties:
        message:
          type: string
        blockedUsers:
          type: array
          items:
            type: string
            format: objectId
    inline_response_200_3:
      type: object
      properties:
        _id:
          type: string
          description: User ID
        username:
          type: string
          description: User's username
    inline_response_200_4:
      type: object
      properties:
        message:
          type: string
          example: Ora segui username
        n_followed:
          type: integer
          description: Number of users followed
        n_followers:
          type: integer
          description: Number of followers of target user
    inline_response_200_5:
      type: object
      properties:
        message:
          type: string
          example: Hai smesso di seguire username
        n_followed:
          type: integer
          description: Number of users followed
        n_followers:
          type: integer
          description: Number of followers of target user
    inline_response_200_6:
      type: object
      properties:
        following:
          type: array
          items:
            $ref: "#/components/schemas/inline_response_200_6_following"
        count:
          type: integer
    inline_response_200_7:
      type: object
      properties:
        followers:
          type: array
          items:
            $ref: "#/components/schemas/inline_response_200_6_following"
        count:
          type: integer
    inline_response_200_8:
      type: object
      properties:
        isFollowing:
          type: boolean
    inline_response_200_6_following:
      type: object
      properties:
        _id:
          type: string
          description: User ID
        username:
          type: string
  securitySchemes:
    accessTokenHeader:
      type: apiKey
      description: The API authentication. The API key must be a valid JWT token.
      name: x-access-token
      in: header
    TokenQueryAuth:
      type: apiKey
      description: The API authentication. The API must be a valid JWT token
      name: token
      in: query
